channel hours_hours_out_first_digit : {0 .. 3}
channel hours_hours_out_second_digit : {0 .. 15}
channel seconds_sec_out_first_digit : {0 .. 7}
channel seconds_sec_out_second_digit : {0 .. 15}
channel minutes_min_out_second_digit : {0 .. 15}
channel minutes_min_out_first_digit : {0 .. 7}
channel clock_c_out_val : {0 .. 20}


Hours(hours_in) =
    let
        hours = ( hours_in / 3600 ) % 24
        hours_first_temp = hours / 10
        hours_second_temp = hours % 10
    within
        hours_hours_out_first_digit ! hours_first_temp ->
        hours_hours_out_second_digit ! hours_second_temp ->
        SKIP

Seconds(sec_in) =
    let
        sec = sec_in % 60
        sec_first_temp = sec / 10
        sec_second_temp = sec % 10
    within
        seconds_sec_out_first_digit ! sec_first_temp ->
        seconds_sec_out_second_digit ! sec_second_temp ->
        SKIP

Minutes(min_in) =
    let
        min = ( min_in / 60 ) % 60
        min_first_temp = min / 10
        min_second_temp = min % 10
    within
        minutes_min_out_first_digit ! min_first_temp ->
        minutes_min_out_second_digit ! min_second_temp ->
        SKIP


N_hours =
clock_c_out_val ? variable ->
(Hours(variable)
[| {| hours_hours_out_first_digit |} |]
hours_hours_out_first_digit_monitor(hours_hours_out_first_digit))
[| {| hours_hours_out_second_digit |} |]
hours_hours_out_second_digit_monitor(hours_hours_out_second_digit)

assert SKIP [F= N_hours \ Events
-- assert N_hours :[deadlock free [F]]


N_seconds =
clock_c_out_val ? variable ->
(Seconds(variable)
[| {| seconds_sec_out_first_digit |} |]
seconds_sec_out_first_digit_monitor(seconds_sec_out_first_digit))
[| {| seconds_sec_out_second_digit |} |]
seconds_sec_out_second_digit_monitor(seconds_sec_out_second_digit)

assert SKIP [F= N_seconds \ Events
-- assert N_seconds :[deadlock free [F]]


N_minutes =
clock_c_out_val ? variable ->
(Minutes(variable)
[| {| minutes_min_out_first_digit |} |]
minutes_min_out_first_digit_monitor(minutes_min_out_first_digit))
[| {| minutes_min_out_second_digit |} |]
minutes_min_out_second_digit_monitor(minutes_min_out_second_digit)

assert SKIP [F= N_minutes \ Events
-- assert N_minutes :[deadlock free [F]]



hours_hours_out_first_digit_monitor(c) =
    c ? x ->
    (0 <= x and x <= 2) & SKIP
hours_hours_out_second_digit_monitor(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

minutes_min_out_first_digit_monitor(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
minutes_min_out_second_digit_monitor(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

seconds_sec_out_first_digit_monitor(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
seconds_sec_out_second_digit_monitor(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP


------------------------------------------------------------------


channel hours_hours_out_first_digit_clock_2 : {0 .. 3}
channel hours_hours_out_second_digit_clock_2 : {0 .. 15}
channel seconds_sec_out_first_digit_clock_2 : {0 .. 7}
channel seconds_sec_out_second_digit_clock_2 : {0 .. 15}
channel minutes_min_out_second_digit_clock_2 : {0 .. 15}
channel minutes_min_out_first_digit_clock_2 : {0 .. 7}
channel clock_c_out_val_clock_2 : {0 .. 20}


Hours_clock_2(hours_in) =
    let
        hours = ( hours_in / 3600 ) % 24
        hours_first_temp = hours / 10
        hours_second_temp = hours % 10
    within
        hours_hours_out_first_digit_clock_2 ! hours_first_temp ->
        hours_hours_out_second_digit_clock_2 ! hours_second_temp ->
        SKIP

Seconds_clock_2(sec_in) =
    let
        sec = sec_in % 60
        sec_first_temp = sec / 10
        sec_second_temp = sec % 10
    within
        seconds_sec_out_first_digit_clock_2 ! sec_first_temp ->
        seconds_sec_out_second_digit_clock_2 ! sec_second_temp ->
        SKIP

Minutes_clock_2(min_in) =
    let
        min = ( min_in / 60 ) % 60
        min_first_temp = min / 10
        min_second_temp = min % 10
    within
        minutes_min_out_first_digit_clock_2 ! min_first_temp ->
        minutes_min_out_second_digit_clock_2 ! min_second_temp ->
        SKIP


N_hours_clock_2 =
clock_c_out_val_clock_2 ? variable ->
(Hours_clock_2(variable)
[| {| hours_hours_out_first_digit_clock_2 |} |]
hours_hours_out_first_digit_monitor_clock_2(hours_hours_out_first_digit_clock_2))
[| {| hours_hours_out_second_digit_clock_2 |} |]
hours_hours_out_second_digit_monitor_clock_2(hours_hours_out_second_digit_clock_2)

assert SKIP [F= N_hours_clock_2 \ Events
-- assert N_hours :[deadlock free [F]]


N_seconds_clock_2 =
clock_c_out_val_clock_2 ? variable ->
(Seconds_clock_2(variable)
[| {| seconds_sec_out_first_digit_clock_2 |} |]
seconds_sec_out_first_digit_monitor_clock_2(seconds_sec_out_first_digit_clock_2))
[| {| seconds_sec_out_second_digit_clock_2 |} |]
seconds_sec_out_second_digit_monitor_clock_2(seconds_sec_out_second_digit_clock_2)

assert SKIP [F= N_seconds_clock_2 \ Events
-- assert N_seconds :[deadlock free [F]]


N_minutes_clock_2 =
clock_c_out_val_clock_2 ? variable ->
(Minutes_clock_2(variable)
[| {| minutes_min_out_first_digit_clock_2 |} |]
minutes_min_out_first_digit_monitor_clock_2(minutes_min_out_first_digit_clock_2))
[| {| minutes_min_out_second_digit_clock_2 |} |]
minutes_min_out_second_digit_monitor_clock_2(minutes_min_out_second_digit_clock_2)

assert SKIP [F= N_minutes_clock_2 \ Events
-- assert N_minutes :[deadlock free [F]]



hours_hours_out_first_digit_monitor_clock_2(c) =
    c ? x ->
    (0 <= x and x <= 2) & SKIP
hours_hours_out_second_digit_monitor_clock_2(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

minutes_min_out_first_digit_monitor_clock_2(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
minutes_min_out_second_digit_monitor_clock_2(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

seconds_sec_out_first_digit_monitor_clock_2(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
seconds_sec_out_second_digit_monitor_clock_2(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP


------------------------------------------------------------------


channel hours_hours_out_first_digit_clock_3 : {0 .. 3}
channel hours_hours_out_second_digit_clock_3 : {0 .. 15}
channel seconds_sec_out_first_digit_clock_3 : {0 .. 7}
channel seconds_sec_out_second_digit_clock_3 : {0 .. 15}
channel minutes_min_out_second_digit_clock_3 : {0 .. 15}
channel minutes_min_out_first_digit_clock_3 : {0 .. 7}
channel clock_c_out_val_clock_3 : {0 .. 20}


Hours_clock_3(hours_in) =
    let
        hours = ( hours_in / 3600 ) % 24
        hours_first_temp = hours / 10
        hours_second_temp = hours % 10
    within
        hours_hours_out_first_digit_clock_3 ! hours_first_temp ->
        hours_hours_out_second_digit_clock_3 ! hours_second_temp ->
        SKIP

Seconds_clock_3(sec_in) =
    let
        sec = sec_in % 60
        sec_first_temp = sec / 10
        sec_second_temp = sec % 10
    within
        seconds_sec_out_first_digit_clock_3 ! sec_first_temp ->
        seconds_sec_out_second_digit_clock_3 ! sec_second_temp ->
        SKIP

Minutes_clock_3(min_in) =
    let
        min = ( min_in / 60 ) % 60
        min_first_temp = min / 10
        min_second_temp = min % 10
    within
        minutes_min_out_first_digit_clock_3 ! min_first_temp ->
        minutes_min_out_second_digit_clock_3 ! min_second_temp ->
        SKIP


N_hours_clock_3 =
clock_c_out_val_clock_3 ? variable ->
(Hours_clock_3(variable)
[| {| hours_hours_out_first_digit_clock_3 |} |]
hours_hours_out_first_digit_monitor_clock_3(hours_hours_out_first_digit_clock_3))
[| {| hours_hours_out_second_digit_clock_3 |} |]
hours_hours_out_second_digit_monitor_clock_3(hours_hours_out_second_digit_clock_3)

assert SKIP [F= N_hours_clock_3 \ Events
-- assert N_hours :[deadlock free [F]]


N_seconds_clock_3 =
clock_c_out_val_clock_3 ? variable ->
(Seconds_clock_3(variable)
[| {| seconds_sec_out_first_digit_clock_3 |} |]
seconds_sec_out_first_digit_monitor_clock_3(seconds_sec_out_first_digit_clock_3))
[| {| seconds_sec_out_second_digit_clock_3 |} |]
seconds_sec_out_second_digit_monitor_clock_3(seconds_sec_out_second_digit_clock_3)

assert SKIP [F= N_seconds_clock_3 \ Events
-- assert N_seconds :[deadlock free [F]]


N_minutes_clock_3 =
clock_c_out_val_clock_3 ? variable ->
(Minutes_clock_3(variable)
[| {| minutes_min_out_first_digit_clock_3 |} |]
minutes_min_out_first_digit_monitor_clock_3(minutes_min_out_first_digit_clock_3))
[| {| minutes_min_out_second_digit_clock_3 |} |]
minutes_min_out_second_digit_monitor_clock_3(minutes_min_out_second_digit_clock_3)

assert SKIP [F= N_minutes_clock_3 \ Events
-- assert N_minutes :[deadlock free [F]]



hours_hours_out_first_digit_monitor_clock_3(c) =
    c ? x ->
    (0 <= x and x <= 2) & SKIP
hours_hours_out_second_digit_monitor_clock_3(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

minutes_min_out_first_digit_monitor_clock_3(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
minutes_min_out_second_digit_monitor_clock_3(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

seconds_sec_out_first_digit_monitor_clock_3(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
seconds_sec_out_second_digit_monitor_clock_3(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP


------------------------------------------------------------------

channel hours_hours_out_first_digit_clock_4 : {0 .. 3}
channel hours_hours_out_second_digit_clock_4 : {0 .. 15}
channel seconds_sec_out_first_digit_clock_4 : {0 .. 7}
channel seconds_sec_out_second_digit_clock_4 : {0 .. 15}
channel minutes_min_out_second_digit_clock_4 : {0 .. 15}
channel minutes_min_out_first_digit_clock_4 : {0 .. 7}
channel clock_c_out_val_clock_4 : {0 .. 20}


Hours_clock_4(hours_in) =
    let
        hours = ( hours_in / 3600 ) % 24
        hours_first_temp = hours / 10
        hours_second_temp = hours % 10
    within
        hours_hours_out_first_digit_clock_4 ! hours_first_temp ->
        hours_hours_out_second_digit_clock_4 ! hours_second_temp ->
        SKIP

Seconds_clock_4(sec_in) =
    let
        sec = sec_in % 60
        sec_first_temp = sec / 10
        sec_second_temp = sec % 10
    within
        seconds_sec_out_first_digit_clock_4 ! sec_first_temp ->
        seconds_sec_out_second_digit_clock_4 ! sec_second_temp ->
        SKIP

Minutes_clock_4(min_in) =
    let
        min = ( min_in / 60 ) % 60
        min_first_temp = min / 10
        min_second_temp = min % 10
    within
        minutes_min_out_first_digit_clock_4 ! min_first_temp ->
        minutes_min_out_second_digit_clock_4 ! min_second_temp ->
        SKIP


N_hours_clock_4 =
clock_c_out_val_clock_4 ? variable ->
(Hours_clock_4(variable)
[| {| hours_hours_out_first_digit_clock_4 |} |]
hours_hours_out_first_digit_monitor_clock_4(hours_hours_out_first_digit_clock_4))
[| {| hours_hours_out_second_digit_clock_4 |} |]
hours_hours_out_second_digit_monitor_clock_4(hours_hours_out_second_digit_clock_4)

assert SKIP [F= N_hours_clock_4 \ Events
-- assert N_hours :[deadlock free [F]]


N_seconds_clock_4 =
clock_c_out_val_clock_4 ? variable ->
(Seconds_clock_4(variable)
[| {| seconds_sec_out_first_digit_clock_4 |} |]
seconds_sec_out_first_digit_monitor_clock_4(seconds_sec_out_first_digit_clock_4))
[| {| seconds_sec_out_second_digit_clock_4 |} |]
seconds_sec_out_second_digit_monitor_clock_4(seconds_sec_out_second_digit_clock_4)

assert SKIP [F= N_seconds_clock_4 \ Events
-- assert N_seconds :[deadlock free [F]]


N_minutes_clock_4 =
clock_c_out_val_clock_4 ? variable ->
(Minutes_clock_4(variable)
[| {| minutes_min_out_first_digit_clock_4 |} |]
minutes_min_out_first_digit_monitor_clock_4(minutes_min_out_first_digit_clock_4))
[| {| minutes_min_out_second_digit_clock_4 |} |]
minutes_min_out_second_digit_monitor_clock_4(minutes_min_out_second_digit_clock_4)

assert SKIP [F= N_minutes_clock_4 \ Events
-- assert N_minutes :[deadlock free [F]]



hours_hours_out_first_digit_monitor_clock_4(c) =
    c ? x ->
    (0 <= x and x <= 2) & SKIP
hours_hours_out_second_digit_monitor_clock_4(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

minutes_min_out_first_digit_monitor_clock_4(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
minutes_min_out_second_digit_monitor_clock_4(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

seconds_sec_out_first_digit_monitor_clock_4(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
seconds_sec_out_second_digit_monitor_clock_4(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP


-- ------------------------------------------------------------------


channel hours_hours_out_first_digit_clock_5 : {0 .. 3}
channel hours_hours_out_second_digit_clock_5 : {0 .. 15}
channel seconds_sec_out_first_digit_clock_5 : {0 .. 7}
channel seconds_sec_out_second_digit_clock_5 : {0 .. 15}
channel minutes_min_out_second_digit_clock_5 : {0 .. 15}
channel minutes_min_out_first_digit_clock_5 : {0 .. 7}
channel clock_c_out_val_clock_5 : {0 .. 20}


Hours_clock_5(hours_in) =
    let
        hours = ( hours_in / 3600 ) % 24
        hours_first_temp = hours / 10
        hours_second_temp = hours % 10
    within
        hours_hours_out_first_digit_clock_5 ! hours_first_temp ->
        hours_hours_out_second_digit_clock_5 ! hours_second_temp ->
        SKIP

Seconds_clock_5(sec_in) =
    let
        sec = sec_in % 60
        sec_first_temp = sec / 10
        sec_second_temp = sec % 10
    within
        seconds_sec_out_first_digit_clock_5 ! sec_first_temp ->
        seconds_sec_out_second_digit_clock_5 ! sec_second_temp ->
        SKIP

Minutes_clock_5(min_in) =
    let
        min = ( min_in / 60 ) % 60
        min_first_temp = min / 10
        min_second_temp = min % 10
    within
        minutes_min_out_first_digit_clock_5 ! min_first_temp ->
        minutes_min_out_second_digit_clock_5 ! min_second_temp ->
        SKIP


N_hours_clock_5 =
clock_c_out_val_clock_5 ? variable ->
(Hours_clock_5(variable)
[| {| hours_hours_out_first_digit_clock_5 |} |]
hours_hours_out_first_digit_monitor_clock_5(hours_hours_out_first_digit_clock_5))
[| {| hours_hours_out_second_digit_clock_5 |} |]
hours_hours_out_second_digit_monitor_clock_5(hours_hours_out_second_digit_clock_5)

assert SKIP [F= N_hours_clock_5 \ Events
-- assert N_hours :[deadlock free [F]]


N_seconds_clock_5 =
clock_c_out_val_clock_5 ? variable ->
(Seconds_clock_5(variable)
[| {| seconds_sec_out_first_digit_clock_5 |} |]
seconds_sec_out_first_digit_monitor_clock_5(seconds_sec_out_first_digit_clock_5))
[| {| seconds_sec_out_second_digit_clock_5 |} |]
seconds_sec_out_second_digit_monitor_clock_5(seconds_sec_out_second_digit_clock_5)

assert SKIP [F= N_seconds_clock_5 \ Events
-- assert N_seconds :[deadlock free [F]]


N_minutes_clock_5 =
clock_c_out_val_clock_5 ? variable ->
(Minutes_clock_5(variable)
[| {| minutes_min_out_first_digit_clock_5 |} |]
minutes_min_out_first_digit_monitor_clock_5(minutes_min_out_first_digit_clock_5))
[| {| minutes_min_out_second_digit_clock_5 |} |]
minutes_min_out_second_digit_monitor_clock_5(minutes_min_out_second_digit_clock_5)

assert SKIP [F= N_minutes_clock_5 \ Events
-- assert N_minutes :[deadlock free [F]]



hours_hours_out_first_digit_monitor_clock_5(c) =
    c ? x ->
    (0 <= x and x <= 2) & SKIP
hours_hours_out_second_digit_monitor_clock_5(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

minutes_min_out_first_digit_monitor_clock_5(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
minutes_min_out_second_digit_monitor_clock_5(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

seconds_sec_out_first_digit_monitor_clock_5(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
seconds_sec_out_second_digit_monitor_clock_5(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP


-- ------------------------------------------------------------------


channel hours_hours_out_first_digit_clock_6 : {0 .. 3}
channel hours_hours_out_second_digit_clock_6 : {0 .. 15}
channel seconds_sec_out_first_digit_clock_6 : {0 .. 7}
channel seconds_sec_out_second_digit_clock_6 : {0 .. 15}
channel minutes_min_out_second_digit_clock_6 : {0 .. 15}
channel minutes_min_out_first_digit_clock_6 : {0 .. 7}
channel clock_c_out_val_clock_6 : {0 .. 20}


Hours_clock_6(hours_in) =
    let
        hours = ( hours_in / 3600 ) % 24
        hours_first_temp = hours / 10
        hours_second_temp = hours % 10
    within
        hours_hours_out_first_digit_clock_6 ! hours_first_temp ->
        hours_hours_out_second_digit_clock_6 ! hours_second_temp ->
        SKIP

Seconds_clock_6(sec_in) =
    let
        sec = sec_in % 60
        sec_first_temp = sec / 10
        sec_second_temp = sec % 10
    within
        seconds_sec_out_first_digit_clock_6 ! sec_first_temp ->
        seconds_sec_out_second_digit_clock_6 ! sec_second_temp ->
        SKIP

Minutes_clock_6(min_in) =
    let
        min = ( min_in / 60 ) % 60
        min_first_temp = min / 10
        min_second_temp = min % 10
    within
        minutes_min_out_first_digit_clock_6 ! min_first_temp ->
        minutes_min_out_second_digit_clock_6 ! min_second_temp ->
        SKIP


N_hours_clock_6 =
clock_c_out_val_clock_6 ? variable ->
(Hours_clock_6(variable)
[| {| hours_hours_out_first_digit_clock_6 |} |]
hours_hours_out_first_digit_monitor_clock_6(hours_hours_out_first_digit_clock_6 ))
[| {| hours_hours_out_second_digit_clock_6 |} |]
hours_hours_out_second_digit_monitor_clock_6(hours_hours_out_second_digit_clock_6 )

assert SKIP [F= N_hours_clock_6  \ Events
-- assert N_hours :[deadlock free [F]]


N_seconds_clock_6 =
clock_c_out_val_clock_6 ? variable ->
(Seconds_clock_6(variable)
[| {| seconds_sec_out_first_digit_clock_6 |} |]
seconds_sec_out_first_digit_monitor_clock_6(seconds_sec_out_first_digit_clock_6))
[| {| seconds_sec_out_second_digit_clock_6 |} |]
seconds_sec_out_second_digit_monitor_clock_6(seconds_sec_out_second_digit_clock_6)

assert SKIP [F= N_seconds_clock_6 \ Events
-- assert N_seconds :[deadlock free [F]]


N_minutes_clock_6 =
clock_c_out_val_clock_6 ? variable ->
(Minutes_clock_6(variable)
[| {| minutes_min_out_first_digit_clock_6 |} |]
minutes_min_out_first_digit_monitor_clock_6(minutes_min_out_first_digit_clock_6))
[| {| minutes_min_out_second_digit_clock_6 |} |]
minutes_min_out_second_digit_monitor_clock_6(minutes_min_out_second_digit_clock_6)

assert SKIP [F= N_minutes_clock_6 \ Events
-- assert N_minutes :[deadlock free [F]]



hours_hours_out_first_digit_monitor_clock_6(c) =
    c ? x ->
    (0 <= x and x <= 2) & SKIP
hours_hours_out_second_digit_monitor_clock_6(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

minutes_min_out_first_digit_monitor_clock_6(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
minutes_min_out_second_digit_monitor_clock_6(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

seconds_sec_out_first_digit_monitor_clock_6(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
seconds_sec_out_second_digit_monitor_clock_6(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP


-- ------------------------------------------------------------------

channel hours_hours_out_first_digit_clock_7 : {0 .. 3}
channel hours_hours_out_second_digit_clock_7 : {0 .. 15}
channel seconds_sec_out_first_digit_clock_7 : {0 .. 7}
channel seconds_sec_out_second_digit_clock_7 : {0 .. 15}
channel minutes_min_out_second_digit_clock_7 : {0 .. 15}
channel minutes_min_out_first_digit_clock_7 : {0 .. 7}
channel clock_c_out_val_clock_7 : {0 .. 20}


Hours_clock_7(hours_in) =
    let
        hours = ( hours_in / 3600 ) % 24
        hours_first_temp = hours / 10
        hours_second_temp = hours % 10
    within
        hours_hours_out_first_digit_clock_7 ! hours_first_temp ->
        hours_hours_out_second_digit_clock_7 ! hours_second_temp ->
        SKIP

Seconds_clock_7(sec_in) =
    let
        sec = sec_in % 60
        sec_first_temp = sec / 10
        sec_second_temp = sec % 10
    within
        seconds_sec_out_first_digit_clock_7 ! sec_first_temp ->
        seconds_sec_out_second_digit_clock_7 ! sec_second_temp ->
        SKIP

Minutes_clock_7(min_in) =
    let
        min = ( min_in / 60 ) % 60
        min_first_temp = min / 10
        min_second_temp = min % 10
    within
        minutes_min_out_first_digit_clock_7 ! min_first_temp ->
        minutes_min_out_second_digit_clock_7 ! min_second_temp ->
        SKIP


N_hours_clock_7 =
clock_c_out_val_clock_7 ? variable ->
(Hours_clock_7(variable)
[| {| hours_hours_out_first_digit_clock_7 |} |]
hours_hours_out_first_digit_monitor_clock_7(hours_hours_out_first_digit_clock_7))
[| {| hours_hours_out_second_digit_clock_7 |} |]
hours_hours_out_second_digit_monitor_clock_7(hours_hours_out_second_digit_clock_7)

assert SKIP [F= N_hours_clock_7 \ Events
-- assert N_hours :[deadlock free [F]]


N_seconds_clock_7 =
clock_c_out_val_clock_7 ? variable ->
(Seconds_clock_7(variable)
[| {| seconds_sec_out_first_digit_clock_7 |} |]
seconds_sec_out_first_digit_monitor_clock_7(seconds_sec_out_first_digit_clock_7))
[| {| seconds_sec_out_second_digit_clock_7 |} |]
seconds_sec_out_second_digit_monitor_clock_7(seconds_sec_out_second_digit_clock_7)

assert SKIP [F= N_seconds_clock_7 \ Events
-- assert N_seconds :[deadlock free [F]]


N_minutes_clock_7 =
clock_c_out_val_clock_7 ? variable ->
(Minutes_clock_7(variable)
[| {| minutes_min_out_first_digit_clock_7 |} |]
minutes_min_out_first_digit_monitor_clock_7(minutes_min_out_first_digit_clock_7))
[| {| minutes_min_out_second_digit_clock_7 |} |]
minutes_min_out_second_digit_monitor_clock_7(minutes_min_out_second_digit_clock_7)

assert SKIP [F= N_minutes_clock_7 \ Events
-- assert N_minutes :[deadlock free [F]]



hours_hours_out_first_digit_monitor_clock_7(c) =
    c ? x ->
    (0 <= x and x <= 2) & SKIP
hours_hours_out_second_digit_monitor_clock_7(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

minutes_min_out_first_digit_monitor_clock_7(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
minutes_min_out_second_digit_monitor_clock_7(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

seconds_sec_out_first_digit_monitor_clock_7(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
seconds_sec_out_second_digit_monitor_clock_7(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP


-- ------------------------------------------------------------------

channel hours_hours_out_first_digit_clock_8 : {0 .. 3}
channel hours_hours_out_second_digit_clock_8 : {0 .. 15}
channel seconds_sec_out_first_digit_clock_8 : {0 .. 7}
channel seconds_sec_out_second_digit_clock_8 : {0 .. 15}
channel minutes_min_out_second_digit_clock_8 : {0 .. 15}
channel minutes_min_out_first_digit_clock_8 : {0 .. 7}
channel clock_c_out_val_clock_8 : {0 .. 20}


Hours_clock_8(hours_in) =
    let
        hours = ( hours_in / 3600 ) % 24
        hours_first_temp = hours / 10
        hours_second_temp = hours % 10
    within
        hours_hours_out_first_digit_clock_8 ! hours_first_temp ->
        hours_hours_out_second_digit_clock_8 ! hours_second_temp ->
        SKIP

Seconds_clock_8(sec_in) =
    let
        sec = sec_in % 60
        sec_first_temp = sec / 10
        sec_second_temp = sec % 10
    within
        seconds_sec_out_first_digit_clock_8 ! sec_first_temp ->
        seconds_sec_out_second_digit_clock_8 ! sec_second_temp ->
        SKIP

Minutes_clock_8(min_in) =
    let
        min = ( min_in / 60 ) % 60
        min_first_temp = min / 10
        min_second_temp = min % 10
    within
        minutes_min_out_first_digit_clock_8 ! min_first_temp ->
        minutes_min_out_second_digit_clock_8 ! min_second_temp ->
        SKIP


N_hours_clock_8 =
clock_c_out_val_clock_8 ? variable ->
(Hours_clock_8(variable)
[| {| hours_hours_out_first_digit_clock_8 |} |]
hours_hours_out_first_digit_monitor_clock_8(hours_hours_out_first_digit_clock_8))
[| {| hours_hours_out_second_digit_clock_8 |} |]
hours_hours_out_second_digit_monitor_clock_8(hours_hours_out_second_digit_clock_8)

assert SKIP [F= N_hours_clock_8 \ Events
-- assert N_hours :[deadlock free [F]]


N_seconds_clock_8 =
clock_c_out_val_clock_8 ? variable ->
(Seconds_clock_8(variable)
[| {| seconds_sec_out_first_digit_clock_8 |} |]
seconds_sec_out_first_digit_monitor_clock_8(seconds_sec_out_first_digit_clock_8))
[| {| seconds_sec_out_second_digit_clock_8 |} |]
seconds_sec_out_second_digit_monitor_clock_8(seconds_sec_out_second_digit_clock_8)

assert SKIP [F= N_seconds_clock_8 \ Events
-- assert N_seconds :[deadlock free [F]]


N_minutes_clock_8 =
clock_c_out_val_clock_8 ? variable ->
(Minutes_clock_8(variable)
[| {| minutes_min_out_first_digit_clock_8 |} |]
minutes_min_out_first_digit_monitor_clock_8(minutes_min_out_first_digit_clock_8))
[| {| minutes_min_out_second_digit_clock_8 |} |]
minutes_min_out_second_digit_monitor_clock_8(minutes_min_out_second_digit_clock_8)

assert SKIP [F= N_minutes_clock_8 \ Events
-- assert N_minutes :[deadlock free [F]]



hours_hours_out_first_digit_monitor_clock_8(c) =
    c ? x ->
    (0 <= x and x <= 2) & SKIP
hours_hours_out_second_digit_monitor_clock_8(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

minutes_min_out_first_digit_monitor_clock_8(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
minutes_min_out_second_digit_monitor_clock_8(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

seconds_sec_out_first_digit_monitor_clock_8(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
seconds_sec_out_second_digit_monitor_clock_8(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP


-- ------------------------------------------------------------------

channel hours_hours_out_first_digit_clock_9 : {0 .. 3}
channel hours_hours_out_second_digit_clock_9 : {0 .. 15}
channel seconds_sec_out_first_digit_clock_9 : {0 .. 7}
channel seconds_sec_out_second_digit_clock_9 : {0 .. 15}
channel minutes_min_out_second_digit_clock_9 : {0 .. 15}
channel minutes_min_out_first_digit_clock_9 : {0 .. 7}
channel clock_c_out_val_clock_9 : {0 .. 20}


Hours_clock_9(hours_in) =
    let
        hours = ( hours_in / 3600 ) % 24
        hours_first_temp = hours / 10
        hours_second_temp = hours % 10
    within
        hours_hours_out_first_digit_clock_9 ! hours_first_temp ->
        hours_hours_out_second_digit_clock_9 ! hours_second_temp ->
        SKIP

Seconds_clock_9(sec_in) =
    let
        sec = sec_in % 60
        sec_first_temp = sec / 10
        sec_second_temp = sec % 10
    within
        seconds_sec_out_first_digit_clock_9 ! sec_first_temp ->
        seconds_sec_out_second_digit_clock_9 ! sec_second_temp ->
        SKIP

Minutes_clock_9(min_in) =
    let
        min = ( min_in / 60 ) % 60
        min_first_temp = min / 10
        min_second_temp = min % 10
    within
        minutes_min_out_first_digit_clock_9 ! min_first_temp ->
        minutes_min_out_second_digit_clock_9 ! min_second_temp ->
        SKIP


N_hours_clock_9 =
clock_c_out_val_clock_9 ? variable ->
(Hours_clock_9(variable)
[| {| hours_hours_out_first_digit_clock_9 |} |]
hours_hours_out_first_digit_monitor_clock_9(hours_hours_out_first_digit_clock_9))
[| {| hours_hours_out_second_digit_clock_9 |} |]
hours_hours_out_second_digit_monitor_clock_9(hours_hours_out_second_digit_clock_9)

assert SKIP [F= N_hours_clock_9 \ Events
-- assert N_hours :[deadlock free [F]]


N_seconds_clock_9 =
clock_c_out_val_clock_9 ? variable ->
(Seconds_clock_9(variable)
[| {| seconds_sec_out_first_digit_clock_9 |} |]
seconds_sec_out_first_digit_monitor_clock_9(seconds_sec_out_first_digit_clock_9))
[| {| seconds_sec_out_second_digit_clock_9 |} |]
seconds_sec_out_second_digit_monitor_clock_9(seconds_sec_out_second_digit_clock_9)

assert SKIP [F= N_seconds_clock_9 \ Events
-- assert N_seconds :[deadlock free [F]]


N_minutes_clock_9 =
clock_c_out_val_clock_9 ? variable ->
(Minutes_clock_9(variable)
[| {| minutes_min_out_first_digit_clock_9 |} |]
minutes_min_out_first_digit_monitor_clock_9(minutes_min_out_first_digit_clock_9))
[| {| minutes_min_out_second_digit_clock_9 |} |]
minutes_min_out_second_digit_monitor_clock_9(minutes_min_out_second_digit_clock_9)

assert SKIP [F= N_minutes_clock_9 \ Events
-- assert N_minutes :[deadlock free [F]]



hours_hours_out_first_digit_monitor_clock_9(c) =
    c ? x ->
    (0 <= x and x <= 2) & SKIP
hours_hours_out_second_digit_monitor_clock_9(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

minutes_min_out_first_digit_monitor_clock_9(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
minutes_min_out_second_digit_monitor_clock_9(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

seconds_sec_out_first_digit_monitor_clock_9(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
seconds_sec_out_second_digit_monitor_clock_9(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP


-- ------------------------------------------------------------------

channel hours_hours_out_first_digit_clock_10 : {0 .. 3}
channel hours_hours_out_second_digit_clock_10 : {0 .. 15}
channel seconds_sec_out_first_digit_clock_10 : {0 .. 7}
channel seconds_sec_out_second_digit_clock_10 : {0 .. 15}
channel minutes_min_out_second_digit_clock_10 : {0 .. 15}
channel minutes_min_out_first_digit_clock_10 : {0 .. 7}
channel clock_c_out_val_clock_10 : {0 .. 20}


Hours_clock_10(hours_in) =
    let
        hours = ( hours_in / 3600 ) % 24
        hours_first_temp = hours / 10
        hours_second_temp = hours % 10
    within
        hours_hours_out_first_digit_clock_10 ! hours_first_temp ->
        hours_hours_out_second_digit_clock_10 ! hours_second_temp ->
        SKIP

Seconds_clock_10(sec_in) =
    let
        sec = sec_in % 60
        sec_first_temp = sec / 10
        sec_second_temp = sec % 10
    within
        seconds_sec_out_first_digit_clock_10 ! sec_first_temp ->
        seconds_sec_out_second_digit_clock_10 ! sec_second_temp ->
        SKIP

Minutes_clock_10(min_in) =
    let
        min = ( min_in / 60 ) % 60
        min_first_temp = min / 10
        min_second_temp = min % 10
    within
        minutes_min_out_first_digit_clock_10 ! min_first_temp ->
        minutes_min_out_second_digit_clock_10 ! min_second_temp ->
        SKIP


N_hours_clock_10 =
clock_c_out_val_clock_10 ? variable ->
(Hours_clock_10(variable)
[| {| hours_hours_out_first_digit_clock_10 |} |]
hours_hours_out_first_digit_monitor_clock_10(hours_hours_out_first_digit_clock_10))
[| {| hours_hours_out_second_digit_clock_10 |} |]
hours_hours_out_second_digit_monitor_clock_10(hours_hours_out_second_digit_clock_10)

assert SKIP [F= N_hours_clock_10 \ Events
-- assert N_hours :[deadlock free [F]]


N_seconds_clock_10 =
clock_c_out_val_clock_10 ? variable ->
(Seconds_clock_10(variable)
[| {| seconds_sec_out_first_digit_clock_10 |} |]
seconds_sec_out_first_digit_monitor_clock_10(seconds_sec_out_first_digit_clock_10))
[| {| seconds_sec_out_second_digit_clock_10 |} |]
seconds_sec_out_second_digit_monitor_clock_10(seconds_sec_out_second_digit_clock_10)

assert SKIP [F= N_seconds_clock_10 \ Events
-- assert N_seconds :[deadlock free [F]]


N_minutes_clock_10 =
clock_c_out_val_clock_10 ? variable ->
(Minutes_clock_10(variable)
[| {| minutes_min_out_first_digit_clock_10 |} |]
minutes_min_out_first_digit_monitor_clock_10(minutes_min_out_first_digit_clock_10))
[| {| minutes_min_out_second_digit_clock_10 |} |]
minutes_min_out_second_digit_monitor_clock_10(minutes_min_out_second_digit_clock_10)

assert SKIP [F= N_minutes_clock_10 \ Events
-- assert N_minutes :[deadlock free [F]]



hours_hours_out_first_digit_monitor_clock_10(c) =
    c ? x ->
    (0 <= x and x <= 2) & SKIP
hours_hours_out_second_digit_monitor_clock_10(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

minutes_min_out_first_digit_monitor_clock_10(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
minutes_min_out_second_digit_monitor_clock_10(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP

seconds_sec_out_first_digit_monitor_clock_10(c) =
    c ? x ->
    (0 <= x and x <= 5) & SKIP
seconds_sec_out_second_digit_monitor_clock_10(c) =
    c ? x ->
    (0 <= x and x <= 9) & SKIP


-- ------------------------------------------------------------------
