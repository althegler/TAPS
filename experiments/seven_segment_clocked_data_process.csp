channel hour_w_first, hour_r_first, hour_w_second, hour_r_second : { -1..20}
channel clock_w : {131067 ..131077}
channel sync

Seven_segment_clock(i) =
    (i+1 <= 131077) & (
        clock_w ! i+1 -> Seven_segment_clock(i+1) [] SKIP)

Hours =
    (sync -> clock_w ? hours_in -> sync ->
        if (hours_in == 131067)
        then hour_r_first ! -1 -> hour_r_second ! -1 -> Hours
        else (
            let
                hours = hours_in % 60 -- For testing
                -- hours = ( hours_in / 3600 ) % 24
                hours_first_temp = hours / 10
                hours_second_temp = hours % 10
            within
                -- I might be able to put them together in a if x > 10 or y >10
                -- But this would probably not be possible to auto generate.
                (hours_first_temp <= 100) & (
                    hour_r_first ! hours_first_temp ->
                    (hours_second_temp <= 100) & (
                        hour_r_second ! hours_second_temp ->
                        Hours
                    )
                )
        )
    ) [] SKIP


-- First digit buffers
Read_first = sync -> ((hour_r_first ? x -> (hour_r_first ? x -> STOP [] Write_first(x))
                    [] sync -> Read_first) [] SKIP)

Writes_first(x) = hour_w_first ! x -> (Writes_first(x) [] Read_first)
Write_first(x) = sync -> (Writes_first(x) [] Read_first) [] SKIP

-- Second digit buffers
Read_second = sync -> ((hour_r_second ? x -> (hour_r_second ? x -> STOP [] Write_second(x))
                    [] sync -> Read_second) [] SKIP)

Writes_second(x) = hour_w_second ! x -> (Writes_second(x) [] Read_second)
Write_second(x) = sync -> (Writes_second(x) [] Read_second) [] SKIP


hours_hours_out_first_digit_monitor(c) =
    (c ? x ->
    (0 <= x and x <= 5 or x == -1) & (
        hours_hours_out_first_digit_monitor(c))
    ) [] SKIP

hours_hours_out_second_digit_monitor(c) =
    (c ? x ->
    (0 <= x and x <= 9 or x == -1) & (
        hours_hours_out_second_digit_monitor(c))
    ) [] SKIP



Clock(10) = SKIP
Clock(n) =  sync -> sync -> Clock(n+1)

Network =
        (
            (
                (
                    (
                        (
                        Hours
                        [|{| hour_r_first |}|]
                        hours_hours_out_first_digit_monitor(hour_r_first)
                        )
                    [|{| hour_r_second |}|]
                    hours_hours_out_second_digit_monitor(hour_r_second)
                    )
                [{| sync, clock_w, hour_r_first, hour_r_second|} || {| clock_w |}]
                Seven_segment_clock(131067)
                )
            [{| sync, clock_w, hour_r_first, hour_r_second|} || {| sync, hour_r_first, hour_w_first |}]
            Write_first(-1)
            )
        [{| sync, clock_w, hour_r_first, hour_r_second, hour_w_first|} || {| sync, hour_r_second, hour_w_second |}]
        Write_second(-1)
        )
        [|{| sync |}|] (
        Clock(1)
        )

assert SKIP [F= Network \ Events
assert Network :[deadlock free [F]]







