channel input : {60533}

channel hours_first_digit, hours_second_digit,
minutes_first_digit, minutes_second_digit,
seconds_first_digit, seconds_second_digit : {0..15}


Hours_first_digit_assert(c) = c ? x -> if x > 9 then STOP else SKIP
Hours_second_digit_assert(c) = c ? x -> if x > 9 then STOP else SKIP

Hours(variable) =
  let
    hours = variable / 3600
    first_hours = hours / 10
    second_hours = hours % 10
  within
    hours_first_digit ! first_hours ->
    hours_second_digit ! second_hours -> SKIP

Minutes_first_digit_assert(c) = c ? x -> if x > 9 then STOP else SKIP
Minutes_second_digit_assert(c) = c ? x -> if x > 9 then STOP else SKIP


Minutes(variable) =
  let
    minutes = (variable / 60) % 60
    first_minute = minutes / 10
    second_minute = minutes % 10
  within
    minutes_first_digit ! first_minute ->
    minutes_second_digit ! second_minute -> SKIP



Seconds_first_digit_assert(c) = c ? x -> if x > 9 then STOP else SKIP
Seconds_second_digit_assert(c) = c ? x -> if x > 9 then STOP else SKIP

Seconds(variable) =
  let
    seconds = variable % 60
    first_second = seconds / 10
    second_second = seconds % 10
  within
    seconds_first_digit ! first_second ->
    seconds_second_digit ! second_second -> SKIP

P_hours = input ? variable ->
          (Hours(variable)
          [| {| hours_first_digit |} |]
          Hours_first_digit_assert(hours_first_digit))
          [| {| hours_second_digit |} |]
          Hours_second_digit_assert(hours_second_digit)

P_minutes = input ? variable ->
          (Minutes(variable)
          [| {| minutes_first_digit |} |]
          Minutes_first_digit_assert(minutes_first_digit))
          [| {| minutes_second_digit |} |]
          Minutes_second_digit_assert(minutes_second_digit)

P_seconds = input ? variable ->
          (Seconds(variable)
          [| {| seconds_first_digit |} |]
          Seconds_first_digit_assert(seconds_first_digit))
          [| {| seconds_second_digit |} |]
          Seconds_second_digit_assert(seconds_second_digit)



assert SKIP [FD= P_hours \ Events
assert SKIP [FD= P_minutes \ Events
assert SKIP [FD= P_seconds \ Events
