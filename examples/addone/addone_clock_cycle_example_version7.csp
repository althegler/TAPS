channel clock
channel d_r, c_r : { -1..5}
channel d_w, c_w : { -1..5}

Add(i) =
    (clock -> d_w ? x -> clock ->
            if (x == -1)
            then (
                let
                    var = i + 1 -- Maybe this should actually just sent i and not i + 1?
                within
                    var <= 5 &
                        c_r ! var -> Add(i))
            else (
                let
                    var = x + 1
                within
                    var <= 5 &
                        c_r ! var -> Add(i))
    )
    [] SKIP


Id(i) =
    (clock -> c_w ? x -> clock ->
            if (x == -1)
            then ( -- Minus let within her
                i <= 5 &
                    d_r ! i -> Id(i))
            else (
                x <= 5 &
                    d_r ! x -> Id(i))
    )
    [] SKIP

Clock(n) =  if n == 10 then SKIP else clock -> clock -> Clock(n+1)


Buf_dr = clock -> ((d_r ? x -> (d_r ? x -> STOP [] Buf_dw(x))
                    [] clock -> Buf_dr) [] SKIP)

Writes_dw(x) = d_w ! x -> ((Writes_dw(x) [] Buf_dr) [] SKIP)
Buf_dw(x) = clock -> (Writes_dw(x) [] Buf_dr) [] SKIP


Buf_cr = clock -> ((c_r ? x -> (c_r ? x -> STOP [] Buf_cw(x))
                    [] clock -> Buf_cr) [] SKIP)

Writes_cw(x) = c_w ! x -> ((Writes_cw(x) [] Buf_cr) [] SKIP)
Buf_cw(x) = clock -> (Writes_cw(x) [] Buf_cr) [] SKIP

System = (
           (
             Add(0) [{| clock, c_r, d_w |} || {| clock, d_r, d_w |}] Buf_dw(-1)
           )
           [{| clock, c_r, d_r, d_w |} || {| clock, c_r, c_w, d_r |}]
           (
             Id(0) [{| clock, c_w, d_r |} || {| clock, c_r, c_w |}] Buf_cw(-1)
           )
         ) [|{| clock |}|] (
           Clock(1)
         )

assert SKIP [F= System \ Events
assert System :[deadlock free [F]]