channel src_src_out_val : {1 .. 1}
channel traffic_A_traffic_a_val: {1..4}
channel traffic_B_traffic_b_val: {1..4}


-- input(x) = if x == 1 then true else false


Traffic_A(traffic_b) =
    let
        val = traffic_b
        res = val + 1
    within
        traffic_A_traffic_a_val ! res -> SKIP

Traffic_B(traffic_a) =
    let
        val = traffic_a
        res = val + 1
    within
        traffic_B_traffic_b_val ! res -> SKIP

-- 
-- if current == 1
-- then init == true
-- else init == false
-- if current == 1
-- then state = 4
--      traffic_A_traffic_a_val ! 4
-- else (if current == 2
-- then state = 1
--      traffic_A_traffic_a_val ! 1
-- else (if current == 3
-- then state = 2
--      traffic_A_traffic_a_val ! 2
-- else (if current == 4
-- then state = 3
--      traffic_A_traffic_a_val ! 3)))



Network = src_src_out_val ? variable ->
       Traffic_A(variable)
       [| {| traffic_A_traffic_a_val,  traffic_B_traffic_b_val|} |]
       src_src_out_val ? variable ->
       Traffic_B(variable)

assert SKIP [F= Network \ Events