channel input : {0..60533}
channel hour1, hour2, minute1, minute2, second1, second2 : {0..15}


Bcd = input ? x -> let
                      hours = x / 3600
                      hours' = hours * 3600
                      hours_left = x - hours'
                      minutes = hours_left / 60
                      minutes' = minutes * 60
                      seconds = hours_left - minutes'
                    within
                    let
                      first_hours = hours / 10
                      second_hours = hours % 10
                    within
                      if first_hours > 10 then STOP else
                      hour1 ! first_hours ->
                      if second_hours > 10 then STOP else
                      hour2 ! second_hours ->
                    let
                      first_minute = minutes / 10
                      second_minute = minutes % 10
                    within
                      if first_minute > 10 then STOP else
                      minute1 ! first_minute ->
                      if second_minute > 10 then STOP else
                      minute2 ! second_minute ->
                    let
                      first_second = seconds / 10
                      second_second = seconds % 10
                    within
                      if first_second> 10 then STOP else
                      second1 ! first_second ->
                      if second_second > 10 then STOP else
                      second2 ! second_second -> SKIP


assert SKIP [FD= Bcd \ Events
