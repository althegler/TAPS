proc clock()
  bus clock_out {
    val: uint;
  };
  var i: uint = 0;
{
  trace("iteration {}", i);
  i = i + 1;
  clock_out.val = i;
}

proc hours(in hours_in)
  bus hours_out {
    first_digit: uint; // = 60000; // range 5 to 7;
    second_digit: uint;
  };
  var hours: uint;
  var hours_first_temp: uint;
  var hours_second_temp: uint;
{
  hours = hours_in.val / 3600 % 24;
  trace ("hours was {}", hours);
  hours_first_temp = hours / 10;
  hours_second_temp = hours % 10;
  hours_out.first_digit = hours_first_temp;
  hours_out.second_digit = hours_second_temp;
}


proc minutes(in minutes_in)
  bus minutes_out {
    first_digit: uint;
    second_digit: uint;
  };
  var minutes: uint;
  var minutes_first_temp: uint;
  var minutes_second_temp: uint;
  {
  minutes = minutes_in.val / 60 % 60;
  trace ("minutes was {}", minutes);
  minutes_first_temp = minutes / 10;
  minutes_second_temp = minutes % 10;
  minutes_out.first_digit = minutes_first_temp;
  minutes_out.second_digit = minutes_second_temp;
}

proc seconds(in seconds_in)
  bus seconds_out {
    seconds_first_digit: uint;
    seconds_second_digit: uint;
  };
  var seconds: uint;
  var seconds_first_temp: uint;
  var seconds_second_temp: uint;
  {
  seconds = seconds_in.val % 60;
  trace ("seconds was {}", seconds);
  seconds_first_temp = seconds / 10;
  seconds_second_temp = seconds % 10;
  seconds_out.seconds_first_digit = seconds_first_temp;
  seconds_out.seconds_second_digit = seconds_second_temp;
}


network clock_network()
{
  instance g of clock();
  instance h of hours(g.clock_out);
  instance m of minutes(g.clock_out);
  instance s of seconds(g.clock_out);
}