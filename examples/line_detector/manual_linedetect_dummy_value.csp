channel counter : {0}
channel sink_r_0, sink_r_1 : {0..4}.Bool
channel sink_r_2, sink_r_3, sink_r_4 : {0..4}.Bool
channel sink_w : { -1..4}.Bool
channel sync


Pixel0 =
    (sync ->
     counter ? x ->
     sync ->
     if (x == 0)
         then sink_r_0 ! 0.true -> Pixel0
         else Pixel0
    ) [] SKIP

Pixel1 =
    (sync ->
     counter ? x ->
     sync ->
     if (x == 1) -- Should be 1 to succeed
         then sink_r_1 ! 1.true -> Pixel1
         else Pixel1
    ) [] SKIP

Pixel2 =
    (sync ->
     counter ? x ->
     sync ->
     if (x == 2)
         then sink_r_2 ! 2.true -> Pixel2
         else Pixel2
    ) [] SKIP

Pixel3 =
    (sync ->
     counter ? x ->
     sync ->
     if (x == 3)
         then sink_r_3 ! 3.true -> Pixel3
         else Pixel3
    ) [] SKIP

Pixel4 =
    (sync ->
     counter ? x ->
     sync ->
     if (x == 4)
         then sink_r_4 ! 4.true -> Pixel4
         else Pixel4
    ) [] SKIP


Sink = sync -> (sink_w ? x -> sync -> Sink [] sync -> Sink) [] SKIP

Read = sync -> ((Read_mul(false, 0.false) [] sync -> Read) [] SKIP)


Read_mul(false, n) = sink_r_0 ? x -> Read_mul(true, x)
                  [] sink_r_1 ? x -> Read_mul(true, x)
                  [] sink_r_2 ? x -> Read_mul(true, x)
                  [] sink_r_3 ? x -> Read_mul(true, x)
                  [] sink_r_4 ? x -> Read_mul(true, x)

Read_mul(true, x) = sink_r_0 ? y -> STOP
                 [] sink_r_1 ? y -> STOP
                 [] sink_r_2 ? y -> STOP
                 [] sink_r_3 ? y -> STOP
                 [] sink_r_4 ? y -> STOP
                 [] Write(x)


Writes(x) = sink_w ! x -> (Writes(x) [] Read)
Write(x) = sync -> (Writes(x) [] Read) [] SKIP


Clock(2) = SKIP
Clock(n) =  sync -> sync -> Clock(n+1)

System =
        (
            (
                (((((
                        Write(0.false)
                        [{| sync, sink_r_0, sink_r_1, sink_r_2, sink_r_3, sink_r_4, sink_w |} || {| sync, sink_r_0, counter |}]
                        Pixel0
                    )
                    [{| sync, sink_r_0, sink_r_1, sink_r_2, sink_r_3, sink_r_4, sink_w, counter |} || {| sync, sink_r_1, counter |}]
                    Pixel1
                )
                    [{| sync, sink_r_0, sink_r_1, sink_r_2, sink_r_3, sink_r_4, sink_w, counter |} || {| sync, sink_r_2, counter |}]
                    Pixel2
                )
                    [{| sync, sink_r_0, sink_r_1, sink_r_2, sink_r_3, sink_r_4, sink_w, counter |} || {| sync, sink_r_3, counter |}]
                    Pixel3
                )
                    [{| sync, sink_r_0, sink_r_1, sink_r_2, sink_r_3, sink_r_4, sink_w, counter |} || {| sync, sink_r_4, counter |}]
                    Pixel4
                )
                [{| sync, sink_r_0, sink_r_1, sink_r_2, sink_r_3, sink_r_4, sink_w, counter |} || {| sync, sink_w |}]
                Sink
            )
            [{| sync, sink_r_0, sink_r_1, sink_r_2, sink_r_3, sink_r_4, sink_w, counter |} || {| sync |}]
            Clock(0)
        )


assert SKIP [F= System \ Events
assert System :[deadlock free [F]]

