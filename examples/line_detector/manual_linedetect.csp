channel counter : { 0..10}
channel sink_r_1, sink_w : {1..2}
channel sink_r_2 : {1..2}
channel sync

DUM_VAL = -1 -- initial value

COUNT = 0



Pixel2 =
    (sync ->
     counter ? x ->
     sync -> -- sink_r ! 1 -> Pixel1) [] SKIP
     if (x == 1)
         then sink_r_2 ! 2 -> Pixel1
         else Pixel1
    ) [] SKIP


Sink = (sync -> sink_w ? x -> sync -> Sink) [] SKIP


-- Read_mul(x, count) = if count > 1 then STOP else Read_mul(x, count+1)
-- x ? val

Read_mul = sync -> ((sink_r_1 ? x -> sink_r_2 ? x -> Write(x))
                    [] sync -> Read) [] SKIP)


Read = sync -> ((sink_r ? x -> (sink_r ? x -> STOP [] Write(x))
                    [] sync -> Read) [] SKIP)




Writes(x) = sink_w ! x -> (Writes(x) [] Read)
Write(x) = sync -> (Writes(x) [] Read) [] SKIP


Clock(2) = SKIP
Clock(n) =  sync -> sync -> Clock(n+1)


System =
        (
            (
                (
                    (
                        Pixel1 [{| sync, sink_r, counter |} || {| sync, sink_r, sink_w |}] Write(-1)
                    )
                    [{| sync, sink_r, sink_w, counter |} || {| sync, sink_r, counter |}] Pixel2
                )
                [{| sync, sink_r, sink_w, counter |} || {| sync, sink_w |}] Sink
            )
            [{| sync, sink_r, sink_w, counter |} || {| sync |}] Clock(0)
        )


assert SKIP [F= System \ Events
assert System :[deadlock free [F]]

