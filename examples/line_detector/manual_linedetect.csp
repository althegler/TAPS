channel counter : {1}
channel sink_r_1, sink_r_2 : {1..2}
channel sink_w : { -1..2}
channel sync

DUM_VAL = -1 -- initial value

COUNT = 0

Pixel1 =
    (sync ->
     counter ? x ->
     sync -> -- sink_r ! 1 -> Pixel1) [] SKIP
     if (x == 3)
         then sink_r_1 ! 1 -> Pixel1
         else Pixel1
    ) [] SKIP

Pixel2 =
    (sync ->
     counter ? x ->
     sync -> -- sink_r ! 1 -> Pixel1) [] SKIP
     if (x == 4)
         then sink_r_2 ! 2 -> Pixel2
         else Pixel2
    ) [] SKIP

Sink = sync -> (sink_w ? x -> sync -> Sink [] sync -> Sink) [] SKIP

Read = sync -> (Read_mul(false,0) [] sync -> Read) [] SKIP

-- Read_mul = sink_r_1 ? x -> (sink_r_2 ? y -> STOP [] Write(x))
        -- [] sink_r_2 ? x -> (sink_r_1 ? y -> STOP [] Write(x))

Read_mul(false, n) = sink_r_1 ? x -> Read_mul(true, x)
                  [] sink_r_2 ? x -> Read_mul(true, x)

Read_mul(true, x) = sink_r_1 ? y -> STOP
                 [] sink_r_2 ? y -> STOP [] Write(x)


Writes(x) = sink_w ! x -> (Writes(x) [] Read)
Write(x) = sync -> (Writes(x) [] Read) [] SKIP


Clock(2) = SKIP
Clock(n) =  sync -> sync -> Clock(n+1)


System =
        (
            (
                (
                    (
                        Pixel1 [{| sync, sink_r_1, counter |} || {| sync, sink_r_1, sink_r_2, sink_w |}] Write(DUM_VAL)
                    )
                    [{| sync, sink_r_1, sink_r_2, sink_w, counter |} || {| sync, sink_r_2, counter |}] Pixel2
                )
                [{| sync, sink_r_1, sink_r_2, sink_w, counter |} || {| sync, sink_w |}] Sink
            )
            [{| sync, sink_r_1, sink_r_2, sink_w, counter |} || {| sync |}] Clock(0)
        )


assert SKIP [F= System \ Events
assert System :[deadlock free [F]]

