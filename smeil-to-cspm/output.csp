channel clock_out_val : {60520..60535} 

channel hours_out_hours_first_digit : {0..9} 

channel minutes_out_minutes_first_digit : {0..9} 

Hours(hours_in) = 
let
hours = hours_in/3600
hours_first_temp = hours/10
hours_second_temp = hours%10
within
hours_out_hours_first_digit ! hours_first_temp -> 
SKIP

Hours_out_hours_first_digit_assert(c) = c ? x -> if 0 <= x and x <= 9 then SKIP else STOP


Minutes(minutes_in) = 
let
minutes = minutes_in/60%60
minutes_first_temp = minutes/10
minutes_second_temp = minutes%10
within
minutes_out_minutes_first_digit ! minutes_first_temp -> 
SKIP

Minutes_out_minutes_first_digit_assert(c) = c ? x -> if 0 <= x and x <= 9 then SKIP else STOP


P_hours = clock_out_val ? variable -> Hours(variable)[| {| hours_out_hours_first_digit|} |] Hours_out_hours_first_digit_assert(hours_out_hours_first_digit)

assert SKIP [FD= P_hours \ Events 

P_minutes = clock_out_val ? variable -> Minutes(variable)[| {| minutes_out_minutes_first_digit|} |] Minutes_out_minutes_first_digit_assert(minutes_out_minutes_first_digit)

assert SKIP [FD= P_minutes \ Events 

